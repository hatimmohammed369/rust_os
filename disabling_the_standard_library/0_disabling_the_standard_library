By default Rust code is linked its standard library which depends on the OS and the C standard library. So we can use these OS-dependent features since we are making our own OS
We disable all this (linking Rust code to its standard library) by the no_std attribute in src/main.rs

Trying to compile src/main.rs with println!("Hello, world!"); inside fn main the compiler says it can not find println! because
it's in the standard library which is
no longer available because of #![no_std] attribute
When (cargo build) with println! uncommented
compiler says it can't find println! which makes sense
and also says
error: `#[panic_handler]` function required, but not found
error: language item required, but not found: `eh_personality`
eh_personality is also defined in the standard library

Running (cargo build) with an empty main will result in these
errors:
> cargo build
error: `#[panic_handler]` function required, but not found
error: language item required, but not found: `eh_personality`

eh_personality is something called a (language item), this name marks a function that's called on panic to free used memory. What this function does is called (Stack Unwinding), however (Stakc Unwinding) is a complicated process and it requires some OS-specific library. So we will disable it
